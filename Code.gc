function doGet(e) {
 
  // if(e.parameter.id){
  //   var id = e.parameter.id;
  //   var output = getDeadlineById(id);
  //   return ContentService
  //   .createTextOutput(JSON.stringify(output))
  //   .setMimeType(ContentService.MimeType.JSON);
  // }
  // var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("leon_CG_v2");
  // var data = sheet.getDataRange().getValues();
  // var headers = data.shift(); // lấy hàng đầu tiên làm header
  // var result = data.map(function(row) {
  // var obj = {};
  // headers.forEach(function(header, i) {
  //   obj[header] = row[i];
  // });
  // return obj;
  // });
  
  // return ContentService
  //   .createTextOutput(JSON.stringify(result))
  //   .setMimeType(ContentService.MimeType.JSON);
return ContentService.createTextOutput("1 Invalid action");
}

//Lấy giá trị hạn sử dụng theo ID
// function getDeadlineById(id) {
//   var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("leon_CG_v2");
//   var data = sheet.getDataRange().getValues();

//   for (var i = 1; i < data.length; i++) { 
//     if (data[i][1] == id) {  
//       // return data[i][5];     
//       return { id: true, deadline :data[i][5] };
//     }
//   }
//   return { id: false };
// }
//===================================================
function doPost(e){
  var data = JSON.parse(e.postData.contents)
  const action = data.action;

  if (action === "login") return login(data);
  if (action === "list") return listAccounts(data.project);
  if (action === "create") return createAccount(data);
  if (action === "update") return updateAccount(data);
  if (action === "delete") return deleteAccount(data);
  if (action === "id") return idAccount(data);
  if (action === "sidebar") return sidebar();


  return ContentService.createTextOutput("2 Invalid action");
}
//=== ID ===
function idAccount(data){
  const project = data.project;
  const id = data.id;
  if (!project) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Project required" }))
    .setMimeType(ContentService.MimeType.JSON);
  }
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(project);
  if (!sheet) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Sheet not found" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  var rows = sheet.getDataRange().getValues();

  for (var i = 1; i < rows.length; i++) { 
    if (rows[i][1] == id) {  
      // return data[i][5];     
      return ContentService.createTextOutput(JSON.stringify({ id: true, deadline: rows[i][5] }))
        .setMimeType(ContentService.MimeType.JSON);
    }
  }
  return ContentService.createTextOutput(JSON.stringify({ id: false}))
    .setMimeType(ContentService.MimeType.JSON);

}
//==========
function formatDate(dateStr) {
  if (!dateStr) return ""        // nếu rỗng thì giữ nguyên rỗng
  const d = new Date(dateStr)
  if (isNaN(d)) return dateStr   // nếu parse fail thì trả về string gốc
  return d.toISOString().slice(0, 10) // yyyy-MM-dd
}
// === LOGIN ===
function login(data) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Login");
  const rows = sheet.getDataRange().getValues(); // [ [username, password], ... ]
  for (let i = 1; i < rows.length; i++) {
    if (rows[i][0] == data.username && rows[i][1] == data.password) {
      return ContentService.createTextOutput(JSON.stringify({ success: true }))
        .setMimeType(ContentService.MimeType.JSON);
    }
  }
  return ContentService.createTextOutput(JSON.stringify({ success: false }))
    .setMimeType(ContentService.MimeType.JSON);
}
// === LIST ACCOUNTS ===
function listAccounts(project) {
  if (!project) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Project required" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(project);
  if (!sheet) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Sheet not found" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  const rows = sheet.getDataRange().getValues();
  const data = [];
  for (let i = 1; i < rows.length; i++) {
    data.push({
      time: rows[i][0],
      id: rows[i][1],
      name: rows[i][2],
      phone: rows[i][3],
      email: rows[i][4],
      deadline: formatDate(rows[i][5]),
      createdBy: rows[i][6],
    });
  }
  return ContentService.createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON);
}
// === LIST ACCOUNTS 2 ===
function listAccounts2(project) {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(project);
  if (!sheet) {
    return [];
  }
  const rows = sheet.getDataRange().getValues();
  const data = [];
  for (let i = 1; i < rows.length; i++) {
    data.push({
      time: rows[i][0],
      id: rows[i][1],
      name: rows[i][2],
      phone: rows[i][3],
      email: rows[i][4],
      deadline: formatDate(rows[i][5]),
      createdBy: rows[i][6],
    });
  }
  return data;
}
// === SIDEBAR ===
function sidebar() {

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Sidebar");
  if (!sheet) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Sidebar Sheet not found" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  const rows = sheet.getDataRange().getValues();
  const data = [];
  for (let i = 1; i < rows.length; i++) {
    const accounts = listAccounts2(rows[i][0]);
    data.push({
      key: rows[i][0],
      title: rows[i][1],
      desc: rows[i][2],
      accounts: accounts
    });
  }
  return ContentService.createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON);
}
// === CREATE ===
function createAccount(data) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(data.project);
  if (!sheet) {
    return ContentService.createTextOutput(JSON.stringify({ success: false, error: "c Invalid project" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  sheet.appendRow([
    new Date().toLocaleString(),
    data.id,
    data.name,
    data.phone,
    data.email,
    data.deadline,
    data.createdBy
  ]);
  return ContentService.createTextOutput(JSON.stringify({ success: true }))
    .setMimeType(ContentService.MimeType.JSON);
}

// === UPDATE ===
function updateAccount(data) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(data.project);
  if (!sheet) {
    return ContentService.createTextOutput(JSON.stringify({ success: false, error: "u Invalid project" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  const rows = sheet.getDataRange().getValues();
  for (let i = 1; i < rows.length; i++) {
    if (rows[i][1] === data.id) {
      sheet.getRange(i + 1, 3).setValue(data.name);
      sheet.getRange(i + 1, 4).setValue(data.phone);
      sheet.getRange(i + 1, 5).setValue(data.email);
      sheet.getRange(i + 1, 6).setValue(data.deadline);
      return ContentService.createTextOutput(JSON.stringify({ success: true }))
        .setMimeType(ContentService.MimeType.JSON);
    }
  }
  return ContentService.createTextOutput(JSON.stringify({ success: false, error: "ID not found" }))
    .setMimeType(ContentService.MimeType.JSON);
}

// === DELETE ===
function deleteAccount(data) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(data.project);
  if (!sheet) {
    return ContentService.createTextOutput(JSON.stringify({ success: false, error: "d Invalid project" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
  const rows = sheet.getDataRange().getValues();
  for (let i = 1; i < rows.length; i++) {
    if (rows[i][1] === data.id) {
      sheet.deleteRow(i + 1);
      return ContentService.createTextOutput(JSON.stringify({ success: true }))
        .setMimeType(ContentService.MimeType.JSON);
    }
  }
  return ContentService.createTextOutput(JSON.stringify({ success: false, error: "ID not found" }))
    .setMimeType(ContentService.MimeType.JSON);
}
//===================================================
// function doPost(e){
//   // var body = JSON.parse(e.postData.contents)

//   var sheet = SpreadsheetApp.getActiveSheet();

//   var lastRow = Math.max(sheet.getLastRow(), 1);

//   sheet.insertRowAfter(lastRow); 

//   var timestamp = new Date()

// // Date Stock Signal B_S  Close
//   sheet.getRange(lastRow + 1, 1).setValue(timestamp.toLocaleString()); 
//   // sheet.getRange(lastRow + 1, 2).setValue(body.type); 
//   // sheet.getRange(lastRow + 1, 3).setValue(body.syb);
//   // sheet.getRange(lastRow + 1, 4).setValue(body.ce);
//   // sheet.getRange(lastRow + 1, 5).setValue(body.entry);
//   // sheet.getRange(lastRow + 1, 6).setValue(body.tp); 
//   // sheet.getRange(lastRow + 1, 7).setValue(body.sl); 

//   SpreadsheetApp.flush();
//   // return ContentService.createTextOutput(JSON.stringify(body)) 
//   return ContentService.createTextOutput() 
// }